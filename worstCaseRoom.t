#charset "us-ascii"
//
// worstCaseRoom.t
//
//	Class for rooms generated by the random map generator.
//
//
#include <adv3.h>
#include <en_us.h>

#include "worstCase.h"

#ifdef WORST_CASE

class WorstCaseRoom: SimpleRandomMapRoom
	desc = "This is <<worstCaseRoomName()>>.  Its coordinates
		are <<getCoords()>>.
		<.p>
		The room with the largest crowd is currently
		<<getMostCrowdedRoomName()>>.  To reach it, go
		<<directionToMostCrowdedRoom()>>. "

	// Returns the room name, including the zone.
	worstCaseRoomName() {
		return('room <<toString(simpleRandomMapID)>> in
			<<zoneName()>>');
	}

	// Returns the zone name as a single-quoted string.
	zoneName() {
		return('zone #<<toString(simpleRandomMapGenerator
			.zoneNumber)>>');
	}

	// Returns the connector from this room to the given room, for the
	// given actor.
	getConnectorTo(rm, actor) {
		local c, d, dst, i;

		for(i = 1; i <= Direction.allDirections.length; i++) {
			d = Direction.allDirections[i];
			if((c = getTravelConnector(d, actor)) == nil)
				continue;
			if(!c.isConnectorApparent(self, actor))
				continue;
			if((dst = c.getDestination(self, actor)) == nil)
				continue;
			if(dst != rm)
				continue;
			return(c);
		}

		return(nil);
	}

	getMostCrowdedRoomName() {
		local rm;

		if((rm = worstCase.getMostCrowdedRoom()) == nil)
			return('unknown');
		return(rm.worstCaseRoomName());
	}

	directionToMostCrowdedRoom() {
		local a, c, l, rm0, rm1;

		if((rm1 = worstCase.getMostCrowdedRoom()) == nil)
			return('to errorland');

		if((a = gameMain.initialPlayerChar) == nil)
			return('far beyond time and space');

		if((rm0 = a.getOutermostRoom()) == nil)
			return('nowhere');

		l = worstCase.findPath(a, rm0, rm1);
		if((l == nil) || (l.length < 2))
			return('nowhere fast');

		if((c = rm0.getDirTo(l[2], a)) == nil)
			return('into the void');

		return(toString(c.name));
	}

	getDirTo(rm, actor) {
		local c, d, dst, i;

		for(i = 1; i <= Direction.allDirections.length(); i++) {
			d = Direction.allDirections[i];
			if((c = getTravelConnector(d, actor)) == nil)
				continue;
			if(!c.isConnectorApparent(self, actor))
				continue;
			if((dst = c.getDestination(self, actor)) == nil)
				continue;
			if(dst != rm)
				continue;
			return(d);
		}

		return(nil);
	}
;

#endif // WORST_CASE
